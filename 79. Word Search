Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false
 

Constraints:

m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board and word consists of only lowercase and uppercase English letters.


-----------------------------------Java Code---------------------------
class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length;
        int n = board[0].length; 
        for (int r = 0; r < m; r++) {
            for (int c = 0; c < n; c++) {
                if (word.charAt(0) == board[r][c]) { 
                    boolean found = dfs(board, r, c, word, 0);
                    if (found) return true;
                }
            }
        }
        return false;
    }

    public boolean dfs(char[][] board, int r, int c, String word, int wi) {
        // Base case
        if (wi == word.length()) {
            return true;
        }

        // Out of bounds
        int rows = board.length;
        int cols = board[0].length;
        if (r < 0 || c < 0 || r >= rows || c >= cols) {
            return false;
        }

        // Invalid case
        if (board[r][c] == ' ' || board[r][c] != word.charAt(wi)) {
            return false;
        }

        // Mark as visited
        char ch = board[r][c];
        board[r][c] = ' ';

        // DFS calls
        if (dfs(board, r - 1, c, word, wi + 1) ||
            dfs(board, r, c + 1, word, wi + 1) ||
            dfs(board, r + 1, c, word, wi + 1) ||
            dfs(board, r, c - 1, word, wi + 1)) {
            return true;
        }

        // Backtracking
        board[r][c] = ch;
        return false;
    }
}

