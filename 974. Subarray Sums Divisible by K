Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104



------------------Java Code---------------------


class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int count = 0;          // To store the count of valid subarrays
        int sum = 0;            // Tracks the running sum
        int[] remainderFreq = new int[k]; // To track remainders
        remainderFreq[0] = 1;   // A subarray divisible by k starts with sum 0

        for (int num : nums) {
            // Add the current number to the sum
            sum += num;

            // Calculate remainder and make it positive
            int remainder = sum % k;
            if (remainder < 0) {
                remainder += k;
            }

            // Add the frequency of this remainder to count
            count += remainderFreq[remainder];

            // Increase the frequency of this remainder
            remainderFreq[remainder]++;
        }

        return count; // Return the total count of subarrays divisible by k
    }
}

