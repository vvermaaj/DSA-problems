Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2
 

Constraints:

1 <= nums.length <= 2 * 104
-1000 <= nums[i] <= 1000
-107 <= k <= 107

--------------------Java Code------------------------

import java.util.HashMap;

class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0;
        int prefixSum = 0;
        HashMap<Integer, Integer> sumFrequencyMap = new HashMap<>();
        
        // Initialize the map with sum 0 having a frequency of 1 (base case)
        sumFrequencyMap.put(0, 1);

        // Loop through the array to calculate the cumulative sum
        for (int num : nums) {
            prefixSum += num;  // Update the cumulative sum

            // Check if there is a previous prefix sum such that prefixSum - k exists
            if (sumFrequencyMap.containsKey(prefixSum - k)) {
                count += sumFrequencyMap.get(prefixSum - k);  // Add the number of times this sum has occurred
            }

            // Add or update the frequency of the current prefix sum in the map
            sumFrequencyMap.put(prefixSum, sumFrequencyMap.getOrDefault(prefixSum, 0) + 1);
        }
        
        return count;  // Return the total count of subarrays
    }
}
